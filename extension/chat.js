let chatHistory = {};
let currentChatId = null;
let server = localStorage.getItem("server");
let userId = localStorage.getItem("user_id");

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ manifest.json
if (typeof chrome !== "undefined" && chrome.runtime && chrome.runtime.getManifest) {
  const ver = chrome.runtime.getManifest().version;
  document.addEventListener("DOMContentLoaded", () => {
    const verEl = document.getElementById("appVer");
    if (verEl) verEl.innerText = ver;
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞
function loadModels() {
  fetch(server + "models.php")
    .then(res => res.json())
    .then(models => {
      const select = document.getElementById("modelSelect");
      select.innerHTML = "";
      if (!Array.isArray(models) || models.length === 0) {
        select.innerHTML = `<option value="">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</option>`;
        return;
      }
      models.forEach(id => {
        let label = id.replace(/-/g, " ").toUpperCase();
        select.innerHTML += `<option value="${id}">${label}</option>`;
      });
    })
    .catch(() => {
      const select = document.getElementById("modelSelect");
      select.innerHTML = `
        <option value="gpt-3.5-turbo">GPT-3.5</option>
        <option value="gpt-4">GPT-4</option>
      `;
    });
}

function renderChatList() {
  const list = document.getElementById("chatList");
  list.innerHTML = '';
  Object.keys(chatHistory).forEach(chatId => {
    const chat = chatHistory[chatId];
    const div = document.createElement("div");
    div.className = "chat-item" + (parseInt(chatId) === currentChatId ? " active" : "");
    // –ù–∞–∑–≤–∞–Ω–∏–µ
    const name = document.createElement("span");
    name.className = "chat-title";
    name.innerText = chat.name || ("–ß–∞—Ç " + chatId);
    div.appendChild(name);

    // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    const actions = document.createElement("span");
    actions.className = "chat-actions";

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    const editBtn = document.createElement("button");
    editBtn.title = "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å";
    editBtn.innerHTML = "‚úèÔ∏è";
    editBtn.onclick = e => {
      e.stopPropagation();
      let newName = prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞", chat.name || "");
      if (newName) {
        chat.name = newName;
        renderChatList();
      }
    };
    actions.appendChild(editBtn);

    // –£–¥–∞–ª–∏—Ç—å
    const delBtn = document.createElement("button");
    delBtn.title = "–£–¥–∞–ª–∏—Ç—å —á–∞—Ç";
    delBtn.innerHTML = "üóëÔ∏è";
    delBtn.onclick = e => {
      e.stopPropagation();
      if (confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞—Ç?")) {
        delete chatHistory[chatId];
        if (parseInt(chatId) === currentChatId) {
          // –û—Ç–∫—Ä—ã—Ç—å –ø–µ—Ä–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
          const ids = Object.keys(chatHistory);
          currentChatId = ids.length ? parseInt(ids[0]) : null;
        }
        renderChatList();
        renderMessages();
      }
    };
    actions.appendChild(delBtn);

    div.appendChild(actions);

    // –ü—Ä–∏ –∫–ª–∏–∫–µ –æ—Ç–∫—Ä—ã—Ç—å —á–∞—Ç
    div.onclick = () => {
      currentChatId = parseInt(chatId);
      renderChatList();
      renderMessages();
    };

    list.appendChild(div);
  });
}

function newChat() {
  const id = Date.now();
  chatHistory[id] = { name: "–ù–æ–≤—ã–π —á–∞—Ç", messages: [] };
  currentChatId = id;
  renderChatList();
  renderMessages();
}

function renderMessages() {
  const messages = document.getElementById("messages");
  messages.innerHTML = "";
  if (!currentChatId || !chatHistory[currentChatId]) return;
  (chatHistory[currentChatId].messages || []).forEach(msg => {
    const div = document.createElement("div");
    div.className = "message " + msg.role;
    div.innerText = msg.role === "user" ? "–í—ã: " + msg.content : "GPT: " + msg.content;
    messages.appendChild(div);
  });
  messages.scrollTop = messages.scrollHeight;
}

async function sendMessage() {
  const input = document.getElementById("userInput");
  if (!input) {
    alert("–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞");
    return;
  }
  const content = input.value.trim();
  if (!content) return;

  input.value = "";
  if (!chatHistory[currentChatId]) chatHistory[currentChatId] = { name: "–ù–æ–≤—ã–π —á–∞—Ç", messages: [] };
  chatHistory[currentChatId].messages.push({ role: "user", content });
  renderMessages();

  try {
    const res = await fetch(server + "chat.php", {
      method: "POST",
      headers: { 
        "Content-Type": "application/json",
        "Accept": "application/json"
      },
      body: JSON.stringify({
        user_id: userId,
        message: content,
        model: document.getElementById("modelSelect").value
      })
    });

    if (!res.ok) {
      const errorText = await res.text();
      let errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
      try {
        const errorJson = JSON.parse(errorText);
        errorMessage = errorJson.error || errorMessage;
      } catch(e) {}
      alert(errorMessage);
      return;
    }

    const contentType = res.headers.get("content-type");
    if (contentType && contentType.includes("application/json")) {
      const data = await res.json();
      if (data.success) {
        chatHistory[currentChatId].messages.push({ role: "bot", content: data.reply });
        renderMessages();
      } else {
        alert("–û—à–∏–±–∫–∞: " + data.error);
      }
    } else {
      alert("–û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç");
    }
  } catch (error) {
    alert("–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: " + error.message);
  }
}

window.onload = () => {
  server = localStorage.getItem("server");
  userId = localStorage.getItem("user_id");

  if (!userId || !server) {
    alert("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
    window.close();
    return;
  }

  loadModels();

  fetch(server + "auth.php", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      email: localStorage.getItem("email"),
      password: localStorage.getItem("password"),
      type: "login"
    })
  })
  .then(res => res.json())
  .then(res => {
    if (!res.success) {
      alert("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
      window.close();
    } else {
      newChat();
    }
  })
  .catch(error => {
    alert("–û—à–∏–±–∫–∞: –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã");
    window.close();
  });
};

document.addEventListener("DOMContentLoaded", () => {
  document.getElementById("newChatButton").onclick = newChat;
  const sendButton = document.getElementById("sendButton");
  if (sendButton) sendButton.onclick = sendMessage;
});
