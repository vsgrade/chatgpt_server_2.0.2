<?php
session_start();
require_once "../api/db.php";  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

// –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
ini_set('display_errors', 1);
error_reporting(E_ALL);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü
if (isset($_GET['action']) && $_GET['action'] == 'check') {
    // –°–ø–∏—Å–æ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    $requiredTables = ['users', 'settings', 'token_usage', 'admins', 'error_logs', 'chats', 'messages'];
    
    $missingTables = [];
    $checkedTables = [];  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
        foreach ($requiredTables as $table) {
            // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –≤ –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
            $stmt = $db->prepare("SHOW TABLES LIKE '$table'");
            $stmt->execute();
            
            $checkedTables[] = $table;  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –≤ –º–∞—Å—Å–∏–≤
            
            if ($stmt->rowCount() == 0) {
                $missingTables[] = $table;  // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö
            }
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        $checkedTablesMessage = "–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: " . implode(', ', $checkedTables);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON-–æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ç–∞–±–ª–∏—Ü
        if (empty($missingTables)) {
            echo json_encode([
                'status' => 'success', 
                'message' => '–í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.',
                'checked_tables' => $checkedTablesMessage
            ]);
        } else {
            echo json_encode([
                'status' => 'error', 
                'message' => '–û—Ç—Å—É—Ç—Å—Ç–≤–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: ' . implode(', ', $missingTables),
                'checked_tables' => $checkedTablesMessage
            ]);
        }
    } catch (Exception $e) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        echo json_encode(['status' => 'error', 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()]);
    }
    exit;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–∞–±–ª–∏—Ü
if (isset($_GET['action']) && $_GET['action'] == 'create') {
    try {
        // –°–ø–∏—Å–æ–∫ SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        $createQueries = [
            "CREATE TABLE IF NOT EXISTS users (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(255) NOT NULL,
                password VARCHAR(255) NOT NULL,
                email VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )",
            "CREATE TABLE IF NOT EXISTS settings (
                id INT AUTO_INCREMENT PRIMARY KEY,
                key_name VARCHAR(255) NOT NULL,
                value TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )",
            "CREATE TABLE IF NOT EXISTS token_usage (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                token_usage INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )",
            "CREATE TABLE IF NOT EXISTS admins (
                id INT AUTO_INCREMENT PRIMARY KEY,
                username VARCHAR(255) NOT NULL,
                password VARCHAR(255) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )",
            "CREATE TABLE IF NOT EXISTS error_logs (
                id INT AUTO_INCREMENT PRIMARY KEY,
                level VARCHAR(50) NOT NULL,
                message TEXT NOT NULL,
                file VARCHAR(255) NOT NULL,
                line INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )",
            "CREATE TABLE IF NOT EXISTS chats (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id INT NOT NULL,
                chat_data TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id)
            )",
            "CREATE TABLE IF NOT EXISTS messages (
                id INT AUTO_INCREMENT PRIMARY KEY,
                chat_id INT NOT NULL,
                message_text TEXT NOT NULL,
                sender_id INT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (chat_id) REFERENCES chats(id),
                FOREIGN KEY (sender_id) REFERENCES users(id)
            )"
        ];

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        foreach ($createQueries as $query) {
            $db->exec($query);
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        echo json_encode(['status' => 'success', 'message' => '–¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.']);
    } catch (Exception $e) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        echo json_encode(['status' => 'error', 'message' => '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: ' . $e->getMessage()]);
    }
    exit;
}
?>
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</title>
    <link rel="stylesheet" href="path_to_your_css.css"> <!-- –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É CSS -->
</head>
<body>
    <h3>ü©∫ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞</h3>
    <p>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</p>
    <ul>
      <li><strong>users</strong>, <strong>settings</strong>, <strong>token_usage</strong>, <strong>admins</strong>, <strong>error_logs</strong>, <strong>chats</strong>, <strong>messages</strong></li>
    </ul>
    <div class="mb-3">
        <button class="btn btn-outline-primary" onclick="runDiagnostics()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
        <button class="btn btn-outline-success ms-2" onclick="createTables()">–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã</button>
    </div>
    <div id="diagnosticsResult" class="mt-3"></div>

    <script>
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü)
        function runDiagnostics() {
            const resultDiv = document.getElementById("diagnosticsResult");
            resultDiv.innerHTML = "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞...";  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            fetch("diagnostics.php?action=check")
                .then(res => res.json())
                .then(data => {
                    if (data.status === 'success') {
                        resultDiv.innerHTML = `<span class='text-success'>${data.message}</span><br> ${data.checked_tables}`;
                    } else {
                        resultDiv.innerHTML = `<span class='text-danger'>${data.message}</span><br> ${data.checked_tables}`;
                    }
                })
                .catch(err => {
                    resultDiv.innerHTML = "<span class='text-danger'>–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: " + err + "</span>";  // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        function createTables() {
            const resultDiv = document.getElementById("diagnosticsResult");
            resultDiv.innerHTML = "‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...";  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            fetch("diagnostics.php?action=create")
                .then(res => res.json())
                .then(data => {
                    if (data.status === 'success') {
                        resultDiv.innerHTML = `<span class='text-success'>${data.message}</span>`;  // –£—Å–ø–µ—Ö
                    } else {
                        resultDiv.innerHTML = `<span class='text-danger'>${data.message}</span>`;  // –û—à–∏–±–∫–∞
                    }
                })
                .catch(err => {
                    resultDiv.innerHTML = "<span class='text-danger'>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: " + err + "</span>";  // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                });
        }
    </script>
</body>
</html>
